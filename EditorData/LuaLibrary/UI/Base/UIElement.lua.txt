--[[
-- added by wsh @ 2017-12-08
-- UI容器基类：当一个UI组件持有其它UI组件时，它就是一个容器类，它要负责调度其它UI组件的相关函数
-- 注意：
-- 1、window.view是窗口最上层的容器类
-- 2、AddComponent用来添加组件，一般在window.view的OnCreate中使用，RemoveComponent相反
-- 3、GetComponent用来获取组件，GetComponents用来获取一个类别的组件
-- 4、很重要：子组件必须保证名字互斥，即一个不同的名字要保证对应于Unity中一个不同的Transform
--]]
---@class 所有UI的基类
local UIElement = BaseClass("UIElement")

local GameTool = CS.TSLuaFramework.Tool.GameTool
local UIEvent = CS.TSLuaFramework.Tool.UIEvent
local EventTriggerType = CS.UnityEngine.EventSystems.EventTriggerType

--region 私有函数开始

---检测是否存在UIEvent
local function checkUIEvent(element)
    if element._uievent == nil then
        element._uievent = UIEvent(element.gameObject)
    end
end

--endregion 私有函数结束

--region 静态方法

function UIElement.Destroy(element)
    element.active = false
    element:Internal_OnDestroy()
    Object.Destroy(element.gameObject)
    element._gameObject = nil
    GameTool.RecoverInstanceId(element.InstanceId)
    delete(element)
    element = nil
end
function UIElement.DestroyImmediate(element)
    element.active = false
    element:Internal_OnDestroy()
    Object.DestroyImmediate(element.gameObject)
    element._gameObject = nil
    GameTool.RecoverInstanceId(element.InstanceId)
    delete(element)
    element = nil
end

--endregion 静态方法结束

--region 属性开始

---实例ID
UIElement.InstanceId = {
    getter = function(self)
        return self._instanceId
    end
}

---游戏物体
UIElement.gameObject = {
    getter = function(self)
        return self._gameObject
    end
}
---游戏物体的Transform
UIElement.transform = {
    getter = function(self)
        return self._transform
    end
}
---游戏物体的RectTransform
UIElement.rectTransform = {
    getter = function(self)
        return self._rectTransform
    end
}
---元素名
UIElement.name = {
    getter = function(self)
        return self.gameObject.name
    end,
    setter = function(self, value)
        self.gameObject.name = tostring(value)
    end
}
---隐藏标识符
UIElement.hideFlags = {
    getter = function(self)
        return self.gameObject.hideFlags
    end,
    setter = function(self, value)
        self.gameObject.hideFlags = value
    end
}
---是否处于激活状态
UIElement.active = {
    getter = function(self)
        return self.gameObject.activeSelf
    end,
    setter = function(self, value)
        local temp = self.active
        if (temp ~= value) then
            if (value) then
                self.gameObject:SetActive(value)
                self:Internal_OnEnable()
            else
                self:Internal_OnDisable()
                self.gameObject:SetActive(value)
            end
        end
    end
}
--endregion 属性结束

--region 事件开始

---Unity的一个事件,具体查Unity的文档

---拖动开始事件(Func<PointerEventData>)
UIElement.onBeginDrag = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.BeginDrag, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.BeginDrag, func)
    end
}

---拖动中事件(Func<PointerEventData>)
UIElement.onDrag = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.Drag, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.Drag, func)
    end
}

---拖动结束事件(Func<PointerEventData>)
UIElement.onEndDrag = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.EndDrag, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.EndDrag, func)
    end
}

---指针进入事件(Func<PointerEventData>)
UIElement.onPointerEnter = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.PointerEnter, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.PointerEnter, func)
    end
}

---指针离开事件(Func<PointerEventData>)
UIElement.onPointerExit = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.PointerExit, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.PointerExit, func)
    end
}

---指针按下事件(Func<PointerEventData>)
UIElement.onPointDown = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.PointerDown, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.PointerDown, func)
    end
}

---接收拖动事件(Func<PointerEventData>)
---接受实现IDragHandler接口的组件拖动到本组件上面松开时触发
UIElement.onDrop = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.Drop, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.Drop, func)
    end
}

---指针抬起事件(Func<PointerEventData>)
UIElement.onPointerUp = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.PointerUp, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.PointerUp, func)
    end
}

---指针点击事件(Func<PointerEventData>)
---在组件可视的区域按下且抬起时指针处于区域内(按下离开区域后抬起不会触发)
UIElement.onPointerClick = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.PointerClick, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.PointerClick, func)
    end
}

---初始化潜在的拖动事件(Func<PointerEventData>)
---(必须实现IDragHandler接口)与IPointerDownHandler事件触发条件大致相同
UIElement.onInitializePotentialDrag = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.InitializePotentialDrag, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.InitializePotentialDrag, func)
    end
}

---滚动事件(Func<PointerEventData>)
---滑轮在上面滚动时触发
UIElement.onScroll = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddPointerEvent(EventTriggerType.Scroll, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemovePointerEvent(EventTriggerType.Scroll, func)
    end
}

---选中物体每帧触发事件(Func<BaseEventData>)
UIElement.onUpdateSelected = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddBaseEvent(EventTriggerType.UpdateSelected, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemoveBaseEvent(EventTriggerType.UpdateSelected, func)
    end
}

---选择事件(Func<BaseEventData>)
UIElement.onSelect = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddBaseEvent(EventTriggerType.Select, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemoveBaseEvent(EventTriggerType.Select, func)
    end
}

---取消选择事件(Func<BaseEventData>)
UIElement.onDeselect = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddBaseEvent(EventTriggerType.Deselect, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemoveBaseEvent(EventTriggerType.Deselect, func)
    end
}

---提交事件(Func<BaseEventData>)
---按下InputManager里的Submit对应的按键(PC、Mac默认:Enter键)。Input.GetButtonDown
UIElement.onSubmit = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddBaseEvent(EventTriggerType.Submit, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemoveBaseEvent(EventTriggerType.Submit, func)
    end
}

---取消事件(Func<BaseEventData>)
---按下InputManager里的Cancel对应的按键(PC、Mac默认:Esc键)。Input.GetButtonDown
UIElement.onCancel = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddBaseEvent(EventTriggerType.Cancel, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemoveBaseEvent(EventTriggerType.Cancel, func)
    end
}

---移动事件(上下左右)(Func<AxisEventData>)
---与InputManager里的Horizontal和Vertical按键相对应。Input.GetAxisRaw
UIElement.onMove = {
    addEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:AddBaseEvent(EventTriggerType.Move, func)
    end,
    removeEvent = function(self, func)
        checkUIEvent(self)
        self._uievent:RemoveBaseEvent(EventTriggerType.Move, func)
    end
}

--endregion 事件结束

---构造函数
---@param obj 游戏物体<可为空>
function UIElement:ctor(obj)
    self._gameObject = obj.gameObject
    self._transform = obj.transform
    self._rectTransform = obj:GetComponent(typeof(RectTransform))
    self._instanceId = GameTool.GetInstanceId()
end

function UIElement:_ctor()
    self._gameObject = nil
    self._transform = nil
    self._rectTransform = nil
    self._instanceId = GameTool.GetInstanceId()
end

--region 公共虚函数开始(所有子类可重写)

---激活时调用
function UIElement:OnEnable()
end
---隐藏时调用
function UIElement:OnDisable()
end
---释放时调用
function UIElement:OnDestroy()
end

--endregion 公共虚函数结束

--region 私有虚函数开始(内部子类可重写)

---激活时调用函数(子类禁止重写)
function UIElement:Internal_OnEnable()
    self:OnEnable()
end
---隐藏时调用函数(子类禁止重写)
function UIElement:Internal_OnDisable()
    self:OnDisable()
end
---释放时调用函数(子类禁止重写)
function UIElement:Internal_OnDestroy()
    self:OnDestroy()
end

--endregion 私有虚函数结束

--region 公共函数（不可重写）

---设置父物体
---@param parent 父物体tran
function UIElement:SetParent(parent)
    self.transform:SetParent(parent.transform)
end

---将该界面设置为不随场景销毁
function UIElement:DontDestroyOnLoad()
    Object.DontDestroyOnLoad(self.gameObject)
end

---关闭一个界面
function UIElement:Close()
    self.Destroy(self)
end

---设置到当前层级的第一位
function UIElement:SetAsFirstSibling()
    self.rectTransform:SetAsFirstSibling()
end

---设置到当前层级的最后一位
function UIElement:SetAsLastSibling()
    self.rectTransform:SetAsLastSibling()
end

---添加一个组件
---@param component 组件类型typeof
---@return 返回一个组件实例
function UIElement:AddComponent(component)
    return self.gameObject:AddComponent(component)
end
---获取一个组件
---@param component 组件类型<typeof>
---@return 返回一个组件实例
function UIElement:GetComponent(component)
    return self.gameObject.GetComponent(component)
end

--endregion 公共函数（不可重写）

return UIElement

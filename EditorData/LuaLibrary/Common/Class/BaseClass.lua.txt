--[[
-- Lua面向对象设计
--]]
-- --保存类类型的虚表
-- local _class = {}

--已经定义过的类
local _classList = {}

---自定义类型
ClassType = {
    class = 1,
    instance = 2
}
---关键字
Keywords = {
    __call = 1,
    __index = 1,
    __newindex = 1,
    __originName = 1,
    __delete = 1,
    ClassType = 1,
    ClassName = 1,
    base = 1,
    _ctor = 1,
    _dtor = 1,
    _setMetaFunc = 1
}

--TempList = {}

---所有类的基类
LuaObject = {
    base = nil,
    ---类名
    ClassName = "Object",
    ClassType = ClassType.class,
    __init = false,
    __delete = false,
    InstanceId = {
        getter = function(self)
            return self._instanceId
        end
    },
    ---构造函数
    _ctor = function(self)
        if self._instanceId == nil then
            self._instanceId = CS.TSLuaFramework.Tool.GameTool.GetInstanceId()
        end
        self._luaActions = {}
    end,
    ---析构函数
    _dtor = function(self)
        if self.InstanceId then
            CS.TSLuaFramework.Tool.GameTool.RecoverInstanceId(self.InstanceId)
        end
        for key, value in pairs(self._luaActions) do
            delete(value)
        end
        self._luaActions = nil
    end,
    ---设置原方法
    __setMetaFunc = function(self, funcName, func)
        if type(func) ~= "function" then
            error("传入的func参数错误", 2)
        end
        local meta = getmetatable(self)
        meta[funcName] = func
    end,
    ---获取一个LuaAction
    ---@param action 方法
    ---@return LuaAction
    GetLuaAction = function(self, action)
        local luaAction = self._luaActions[action]
        if luaAction then
            return luaAction
        else
            luaAction = LuaAction(self, action)
            self._luaActions[action] = luaAction
            return luaAction
        end
    end
}
_classList["LuaObject"] = LuaObject
---验证默认方法是否存在
local function checkDefaultFunc(class)
    local cls = class
    local nilFunc = function()
    end
    while cls ~= nil do
        --构造函数
        local tor = rawget(cls, "_ctor")
        if tor == nil then
            rawset(cls, "_ctor", nilFunc)
        elseif GetTypeName(tor) ~= "function" then
            rawset(cls, "_ctor", nilFunc)
        end
        --析构函数
        tor = rawget(cls, "_dtor")
        if tor == nil then
            rawset(cls, "_dtor", nilFunc)
        elseif GetTypeName(tor) ~= "function" then
            rawset(cls, "_dtor", nilFunc)
        end
        cls = cls.base
    end
end

---全局访问属性和方法(类)
function global__index(table, key)
    if key == "base" or key == "__originName" then
        return rawget(table, key)
    end
    local meta = getmetatable(table)
    meta = getmetatable(meta.instance)
    --如果当前访问的为事件关键字则先查找是否有对应的事件方法
    if key == "addEvent" or key == "removeEvent" or key == "callEvent" then
        if meta.__eventName ~= nil then
            local eventName = meta.__eventName
            meta.__eventName = nil
            return meta.__functions.__eventFuncs[eventName .. "__" .. key]
        end
    end
    --先检查是不是属性
    local value = meta.__attributes[key]
    if value ~= nil then
        if value.getter == nil then
            error("属性[" .. key .. "]为只写属性", 2)
        end
        return value.getter(meta.instance)
    end
    value = meta.__fields[key]
    if value ~= nil then
        return value
    end
    --再检查是不是事件
    value = meta.__events[key]
    if value ~= nil then
        meta.__eventName = key
        --如果发现是事件,保存当前查找的事件名,并返回类
        return meta.instance
    end
    --最后检查是不是方法
    local originName = table.__originName
    --如果使用self调用
    if originName == meta.instance.__originName then
        value = meta.__functions.__lastFuncs[key]
        if value ~= nil then
            return value
        end
    else
        --使用base调用
        value = meta.__functions[originName][key]
        if value ~= nil then
            return value
        else
            error("父类:[" .. originName .. "]中没有方法:[" .. key .. "]")
        end
    end
    local cls = meta.class
    while (cls ~= nil) do
        value = cls[key]
        if value ~= nil then
            return value
        end
        cls = cls.base
    end
    return value
end
---全局修改属性和方法(类)
function global__newindex(table, key, value)
    -- Logger.Log(key)
    if Keywords[key] then
        error(key .. " 是只读属性,不能修改 !!", 2)
    end

    local newType = GetTypeName(value)
    if newType ~= "function" then
        if newType == "table" then
            if value.setter == nil and value.gettter == nil then
                newType = "field"
            elseif value.addEvent ~= nil or value.removeEvent ~= nil then
                error("事件不允许修改,请调用addEvent或者removeEvent进行操作", 2)
            else
                newType = "prop"
            end
        else
            newType = "field"
        end
    end

    local meta = getmetatable(table)
    --先在基础变量中查找
    local val = meta.__attributes[key]
    --当Value 是属性的时候
    if val ~= nil then
        if val.setter == nil then
            error("属性[" .. key .. "]为只读属性", 2)
        end
        val.setter(meta.instance, value)
        return
    end
    val = meta.__fields[key]
    if val ~= nil then
        --当新类型不是字段的时候
        if newType ~= "field" then
            error("正在给字段[" .. key .. "]赋值其他类型,请检查", 2)
        end
        meta.__fields[key] = value
        return
    end
    val = meta.__functions.__lastFuncs[key]
    if val ~= nil then
        --当新类型不是字段的时候
        if newType ~= "function" then
            error("正在给方法[" .. key .. "]赋值其他类型,请检查", 2)
        end
        meta.__functions.__lastFuncs[key] = value
        return
    end

    --当基础变量中不存在则新增变量
    if newType == "function" then
        meta.__functions.__lastFuncs[key] = value
    elseif newType == "prop" then
        meta.__attributes[key] = value
    else
        meta.__fields[key] = value
    end
end

---设置一个类事件的元表
local function setEventMetaTable(meta)
    for key, value in pairs(meta.__events) do
        setmetatable(meta.__events[key], meta)
    end
end

---解析一个类
local function parseClass(class)
    local cls = class
    --查找类链
    local _clsListTemp = {}
    while (cls ~= nil) do
        table.insert(_clsListTemp, cls)
        cls = cls.base
    end
    -- 所有字段
    local fields = {} --只存最后一个<名称,Value>
    -- 所有属性
    local attributes = {} --只存最后一个<名称,Value>
    -- 所有事件
    local events = {} --只存最后一个<名称,Value>
    -- 所有方法
    local functions = {} -- Map<类名, Map<方法名,func> >
    --保存最后实现的那些方法. 实现多态.
    functions.__lastFuncs = {}
    --保存事件方法
    functions.__eventFuncs = {} -- key = 事件名__addEvent,Value 方法
    --先从上往下依次调用类链中的所有方法.
    local _cls = nil
    for i = #_clsListTemp, 1, -1 do
        _cls = _clsListTemp[i]
        local className = _cls.ClassName
        functions[className] = {}
        --找出方法,保存到方法列表中
        for k, v in pairs(_cls) do
            local typeName = type(v)
            if typeName == "function" then
                functions[className][k] = v
                --Logger.Log(className .. "   " .. k)
                if k ~= "_ctor" and k ~= "_dtor" then
                    functions.__lastFuncs[k] = v
                end
            elseif typeName == "table" then
                local copy = DeepCopy(v)
                if copy.setter ~= nil or copy.getter ~= nil then
                    --这个表是属性
                    attributes[k] = copy
                elseif copy.addEvent ~= nil or copy.removeEvent ~= nil then
                    --这个表是事件
                    events[k] = copy
                    functions.__eventFuncs[k .. "__addEvent"] = copy.addEvent
                    functions.__eventFuncs[k .. "__removeEvent"] = copy.removeEvent
                    functions.__eventFuncs[k .. "__callEvent"] = copy.callEvent
                else
                    --这是一个正常表
                    if Keywords[k] == nil then
                        fields[k] = copy
                    end
                end
            else
                if Keywords[k] == nil then
                    fields[k] = v
                end
            end
        end
    end
    return fields, attributes, events, functions
end

--创建一个心类
local function newClass(class, ...)
    --obj是一个对象
    checkDefaultFunc(class)
    local obj = {}
    local meta = {instance = obj, class = class}
    meta.__mode = "k"
    obj.__originName = class.ClassName
    local fields, attributes, events, functions = parseClass(class)
    meta.__fields = fields
    meta.__attributes = attributes
    meta.__events = events
    meta.__functions = functions
    meta.__fields.ClassName = class.ClassName
    meta.__fields.ClassType = ClassType.instance
    fields = nil
    attributes = nil
    events = nil
    functions = nil
    for key, value in pairs(meta.__events) do
        setmetatable(meta.__events[key], meta)
    end
    --createBase(obj, class, meta)
    -- local finishClass = {}
    -- local instan, cls = obj, class
    -- while cls do
    --     if cls.base then
    --         instan.base = {
    --             __originName = cls.base.ClassName
    --         }
    --     end
    --     cls = cls.base
    --     instan = instan.base
    -- end
    createBase = function(o, c)
        if c.base then
            o.base = {
                __originName = c.base.ClassName
            }
            createBase(o.base, c.base)
        end
    end
    createBase(obj, class, meta)
    meta.__index = global__index
    meta.__newindex = global__newindex
    setmetatable(obj, meta)
    local temp = obj.base
    while temp do
        setmetatable(temp, meta)
        temp = temp.base
    end

    local len = select("#", ...)
    if len == 0 then
        -- 调用无参构造函数
        -- 无参构造函数是递归调用的
        create = function(c, ...)
            if c.base then
                create(c.base)
            end
            c._ctor(obj)
        end
        create(obj)
    else
        --有参构造函数只会调用自己,父亲的有参构造函数需要self.base:ctro调用
        if obj.ctor == nil then
            Logger.LogException("类:" .. class.ClassName .. "不存在有参构造函数")
        end
        LuaObject._ctor(obj)
        obj:ctor(...)
    end
    obj.__init = true
    --TempList[obj.InstanceId] = obj
    return obj
end

---基类,类似C#的object
---_ctor 为无参构造函数
---ctor 为有参构造函数
---_dtor 为析构函数
---@param classname 类名
---@param base 父类表
function BaseClass(classname, base)
    assert(type(classname) == "string" and #classname > 0)
    assert(_classList[classname] == nil, '"' .. tostring(classname) .. '" 重复定义!!')
    local clsSource = {}
    --基类
    local baseClass = {}
    --当有父类
    if base then
        baseClass = _classList[base.ClassName]
        if baseClass == nil then
            error('"' .. tostring(base.ClassName) .. '" 父类不存在!!', 2)
        end
    else
        baseClass = LuaObject
    end
    local vtbl = {}
    setmetatable(
        clsSource,
        {
            __call = newClass,
            __index = function(t, k)
                local cls = t
                local val = nil
                while cls ~= nil do
                    val = rawget(cls, k)
                    if val then
                        return val
                    end
                    cls = rawget(cls, "base")
                end
                return val
            end
        }
    )

    clsSource.base = baseClass
    clsSource.ClassName = classname
    clsSource.ClassType = ClassType.class
    clsSource.__init = false
    clsSource.__delete = false
    _classList[classname] = clsSource

    return clsSource
end

local function del(ins, c)
    c._dtor(ins)
    if c.base then
        del(ins, c.base)
    end
end

---删除一个实例,调用完方法请执行 class = nil
---@param class 一个实例
function delete(class)
    if (class.ClassType ~= ClassType.instance) then
        error("要删除的不是一个实例")
    end

    del(class, class)
    local meta = getmetatable(class)
    meta.__fields = nil
    meta.__attributes = nil
    meta.__functions = nil
    meta.instance = nil
    meta.class = nil
    meta.__call = nil
    meta.__index = function()
        error("你正在访问一个删除的对象")
    end
    meta.__newindex = function()
        error("你正在访问一个删除的对象")
    end
    rawset(class, "__delete", true)
    class = nil
end
